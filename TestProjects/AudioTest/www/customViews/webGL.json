{"Category":"Pages","Access":["SuperAdmin"],"Controller":"[\"$scope\", \"$http\", \"webGL2\", \"$q\", function ($scope, $http, wgl, $q) {\n    PreloadImage(\"/content/images/engine control.jpg\");\n    wgl(\"#webGLcanvas\").then(gl =>{\n        let rot = new Float32Array(3);\n        let Render = ()=>{};\n        \n        gl.onrelativemove = (x, y, buttons) => { if(buttons&2){ rot[1] -= x * 4; rot[0] -= y * 4; Render(); } }\n\n        gl.clearColor(0,0,0,1);\n        gl.enable(gl.DEPTH_TEST);\n\n        let Projection = gl.math.perspective(3.14159 * 45.0 / 180.0, gl.drawingBufferWidth / (1.0 * gl.drawingBufferHeight), 0.1, 1000.0);\n        let View = gl.math.lookAt([0,0, -2.0], [0,0,0], [0,1.0,0]);\n        let Model = gl.math.identity();\n        \n        let sq = (function(){\n            let ob = new ObjectBuilder();\n            ob.Begin(ob.GL_QUADS);{\n                ob.Vertex([-0.4589117467403412, 0.4020829200744629, -0.7922937273979187]);\n                ob.Vertex([-0.31297191977500916, 0.3414660692214966, -0.8862559199333191]);\n                ob.Vertex([-0.35014915466308594, 0.22691982984542847, -0.9087920188903809]);\n                ob.Vertex([-0.5023320913314819, 0.27138853073120117, -0.8209815621376038]);\n            } ob.End();\n            let ret = ob.Build();\n            ret.shaders = [\n                { type: \"VERTEX_SHADER\", code: `uniform mat4 view; uniform mat4 projection; attribute vec3 Position; void main(){ gl_Position = projection * view * vec4(Position, 1); }`},\n                { type: \"FRAGMENT_SHADER\", code: `precision mediump float; uniform vec4 Color; void main(){ gl_FragColor = Color; }`}\n            ];\n        \treturn ret;\n        })()\n        debugger;\n        \n        // gl.BuildMesh(mesh)\n        let inter = null;\n        //let r = 0;\n        \n        let meshes = [\n            gl.FetchMesh(\"/api/data/circle.jsonx\"), \n            gl.BuildMesh(sq),\n            gl.FetchMesh(\"/api/data/point.js\")\n        ];\n        \n        let t1={\n            view: gl.math.identity(),\n            projection: Projection,\n            model: Model\n        }\n        let t2={\n            view: gl.math.identity(),\n            projection: Projection,\n            Color: new Float32Array([1, 0, 0, 0.5])\n        }\n        //t2.model[14] = -1;\n        let ray = null;\n        \n        [{\"name\":\"Position\",\"type\":\"FLOAT\",\"size\":3}]\n        \n        \n        gl.onmousemove = e => {\n            let x = (e.offsetX/e.target.offsetWidth-0.5)* -2;\n            let y = (e.offsetY/e.target.offsetHeight-0.5)* 2;\n            ray = gl.math.castRay(x, y, t1.projection, t1.view);\n        }\n        \n        gl.Canvas.onclick = e => {\n            if($scope.currentPoly){\n                let p = ($scope.currentPoly.points.\n                    map((c, i) => ({ i:i, d: gl.math.rayPointDistance2(c, ray) })).\n                    filter(c => c.d < 0.00005).orderBy(c => c.d)[0]||{i:-1}).i;\n                if(p!=-1){\n                    $scope.currentPoly.points.selectedPoint = p;\n                }else{\n                    $scope.currentPoly.points.push(ray);\n                    $scope.currentPoly.points.selectedPoint = $scope.currentPoly.points.length-1;\n                }\n                $scope.$applyAsync();\n            }\n            Render();\n        }\n        const RedColor = new Float32Array([1,0,0,1]);\n        const GreenColor = new Float32Array([0,1,0,1]);\n        \n        $q.all(meshes).then(([m, sq, point]) => {\n            \n            $scope.selectPoly = function(p){\n                $scope.currentPoly=p;\n                if(p.points && p.points.length>2){\n                    sq.Vertices = p.points;\n                    let indices = gl.math.getPolygonIndices(p.points);\n                    sq.Indices = indices;\n                }\n                Render();\n            }\n            function render(){\n                gl.clear(gl.DEPTH_BUFFER_BIT);\n                t2.view = t1.view = gl.math.rotate_YXZ(rot);\n                gl.depthMask(false);\n                m.render(t1);\n                gl.depthMask(true);\n                \n                if($scope.currentPoly && $scope.currentPoly.points.length){\n                    sq.render(t2);\n                    $scope.currentPoly.points.forEach((p, i) => {\n                        point.render({\n                            projection: t1.projection,\n                            view: t1.view,\n                            Position: p,\n                            Color: i==$scope.currentPoly.points.selectedPoint?RedColor:GreenColor\n                        });\n                    })\n                }\n            }\n            Render=render;\n            //inter = setInterval(render, 16);\n            Render();\n        });\n        $scope.$on(\"$destroy\", ()=>{ if(inter) clearInterval(inter); });\n        \n        $scope.Polygons = [];\n        $scope.createPoly = function(){\n            $scope.Polygons.push({name:\"Poly\", points:[]})\n            $scope.currentPoly = $scope.Polygons[$scope.Polygons.length-1];\n        }\n        $scope.removePoly = function(i){\n            if($scope.currentPoly==$scope.Polygons[i]) $scope.currentPoly = null;\n            $scope.Polygons.splice(i, 1);\n            Render();\n        }\n        $scope.editText = function(t){\n            t.currentTarget.querySelector(\"input\").removeAttribute(\"disabled\")\n        }\n        $scope.blurText = function(t){\n            t.currentTarget.setAttribute(\"disabled\",\"\")\n        }\n        $scope.selectPoint = function(i){\n            $scope.currentPoly.points.selectedPoint=i;\n            Render();\n        }\n    });\n}]\n\n\n\n\n\n","Html":"<style>\n    .webgl-card table{\n        border-collapse:collapse;\n        width: 100%;\n    }\n    .webgl-card input.label {\n        border: none;\n        outline: none;\n        color: inherit;\n        background-color: inherit;\n    }\n    .webgl-card .selected {\n        background-color:#6667ab;\n        color: white;\n    }\n</style>\n<md-card class=\"webgl-card\">\n    <md-toolbar class=\"md-table-toolbar md-default\">\n        <div class=\"md-toolbar-tools\">\n            <h2 class=\"text-center\">WebGL</h2>\n        </div>\n    </md-toolbar>\n    <md-card-content layout=\"row\">\n        <canvas id=\"webGLcanvas\" width=\"640\" height=\"500\" style=\"max-width:100%\"></canvas>\n        <div flex>\n            <md-button class=\"md-primary md-raised\" ng-click=\"createPoly()\">New Polygon</md-button>\n            <div style=\"padding:8px\">\n                <table>\n                    <tr ng-repeat=\"p in Polygons\" ng-class=\"{selected:p==currentPoly}\">\n                        <td ng-dblclick=\"editText($event)\" ng-click=\"selectPoly(p)\">\n                            <input disabled ng-model=\"p.name\" class=\"label\" ng-blur=\"blurText($event)\" />\n                        </td>\n                        <td style=\"width:10px\"><i ng-click=\"removePoly($index)\" class=\"mdi mdi-close\"></i></td>\n                    </tr>\n                </table>\n                <div ng-if=\"currentPoly\">\n                    <h5>Points</h5>\n                    <table>\n                        <tr ng-click=\"selectPoint($index)\" ng-repeat=\"p in currentPoly.points\" ng-class=\"{selected:$index==currentPoly.points.selectedPoint}\">\n                            <!--<td>ob.Vertex({{p[0]}}, {{p[1]}}, {{p[2]}});</td>-->\n                            <td>x: {{p[0]|number:2}}</td>\n                            <td>y: {{p[1]|number:2}}</td>\n                            <td>z: {{p[2]|number:2}}</td>\n                        </tr>\n                    </table>\n                </div>\n            </div>\n        </div>\n    </md-card-content>\n</md-card>","Name":"webGL"}