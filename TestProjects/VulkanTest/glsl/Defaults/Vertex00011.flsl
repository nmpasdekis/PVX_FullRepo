#version 440

layout(location = 0) in vec4 Position;
layout(location = 1) in vec3 Normal;
layout(location = 2) in vec2 UV;
layout(location = 3) in vec4 BoneWeight;
layout(location = 4) in ivec4 BoneIndex;


out Vert_t{
	vec4 Position;
	vec3 Normal;
	vec2 UV;
	vec4 Tangent;
} outVert;

struct MorphItem_t {
	vec4 Position;
};

layout(std140, binding = 0) uniform Camera{
	mat4 View;
	mat4 Projection;
	vec3 CameraPosition;
};

layout(std430, binding = 3) readonly buffer Transform {
	mat4 Model[];
};

layout(std430, binding = 4) readonly buffer MorphControl {
	float MorphWeight[];
};

layout(std430, binding = 5) readonly buffer MorphData {
	MorphItem_t[] MorphItem;
};

uniform int MorphCount;
uniform int BoneCount;

void main(){
	vec3 b_pos = vec3(0);
	vec3 b_norm = vec3(0);

	int Offset = BoneCount * gl_InstanceID;
	//const int Offset = 0;
	for (int i = 0; i < 4 && BoneWeight[i] > 0; i++) {
		int bIndex = Offset + BoneIndex[i];
		float bWeight = BoneWeight[i];
		mat4 bone = Model[bIndex];
		b_pos += ((bone * Position) * bWeight).xyz;
		b_norm += (mat3(bone) * Normal) * bWeight;
	}
	gl_Position = Projection * View * (outVert.Position = vec4(b_pos, 1));
	outVert.Normal = normalize(b_norm);
	outVert.UV = UV;
}